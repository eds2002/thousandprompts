import { type GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import { api, RouterOutputs } from "~/utils/api";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";
import { EditorContent, useEditor } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import LayoutWidth from "~/components/ui/LayoutWidth";
import Image from "next/image";
import Header from "~/components/global/Header";
import Button from "~/components/ui/Button";
import Comments from "~/components/comments/Comments";
import { useUser } from "@clerk/nextjs";
import { getAuth } from "@clerk/nextjs/server";
import { useRouter } from "next/router";
import { useCallback, useState } from "react";
import ArticleCard from "~/components/misc/ArticleCard";
import React from "react";

const SelectedPost: NextPage<{ postId: string }> = ({ postId }) => {
  const router = useRouter();
  const { data } = api.posts.getById.useQuery({
    postId,
  });
  const { data: morePosts, isLoading: LoadingOtherPosts } =
    api.posts.getPosts.useQuery({ amount: 25 });

  const editor = useEditor({
    content: data?.post.content
      ? (JSON.parse(data.post.content) as string)
      : "",
    extensions: [StarterKit],
    editable: false,
    editorProps: {
      attributes: {
        class: "prose",
      },
    },
  });

  const [image, setImage] = useState(data?.post.imageUrl ?? "/placeholder.png");

  const { user } = useUser();

  return (
    <>
      <Head>
        <title>Entry - {data?.post.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-full ">
        <Header
          postId={postId}
          forPage={router.query.preview ? "post-preview" : "default"}
        />
        <LayoutWidth className="grid gap-4 lg:grid-cols-12 lg:gap-6">
          <div className="h-full pb-24 lg:col-span-8">
            <div className="relative aspect-video rounded-xl bg-neutral-100">
              <Image
                src={image}
                alt="Blog image"
                fill
                quality={100}
                priority
                placeholder="blur"
                blurDataURL="/placeholder.png"
                className="pointer-events-none h-full w-full select-none rounded-xl object-cover"
                onError={() => {
                  setImage("/placeholder.png");
                }}
              />
              <div className="absolute -bottom-10 left-0 max-w-md rounded-xl  bg-white p-4 shadow-lg">
                <h1 className="text-4xl font-bold">{data?.post.title}</h1>
              </div>
            </div>
            <EditorContent editor={editor} className="mt-16" />
            <Comments postId={postId} />
          </div>
          <aside className="sticky top-0 h-max min-h-screen   rounded-xl  bg-neutral-100 p-4 lg:col-span-4">
            <div className="">
              <div className="w-full">
                <div className="relative h-24 w-24 rounded-full bg-neutral-400">
                  <Image
                    src={data!.user.profilePic}
                    alt={`${data!.user.username}'s profile picture`}
                    fill
                    className="rounded-full object-cover"
                  />
                </div>
                <Button
                  href={`/author/${data!.user.username}`}
                  className="font-medium"
                >
                  {data?.user.username}
                </Button>
                <p className="mt-2">
                  {!!data?.user.bio || data?.user.bio !== ""
                    ? `"${data!.user.bio!}"`
                    : "Author at blog"}
                </p>
                <Button
                  href={`/author/${data!.user?.username}`}
                  className="mt-4 rounded-full bg-black px-4 py-2 text-center text-white"
                >
                  Visit profile
                </Button>
                {user?.id === data!.user.id && (
                  <Button
                    href={`/journal/create?p=${data!.post.id}`}
                    className="mt-2 rounded-full bg-black px-4 py-2 text-center text-white"
                  >
                    Edit Post
                  </Button>
                )}
              </div>
              <MorePosts morePosts={morePosts} />
            </div>
          </aside>
        </LayoutWidth>
      </main>
    </>
  );
};

type UserPost = RouterOutputs["posts"]["getPosts"];

const MorePosts = ({ morePosts }: { morePosts: UserPost | undefined }) => {
  const randomPosts = useCallback(() => {
    if (morePosts) {
      const randomNums: number[] = [];
      for (let i = 0; i < 3; i++) {
        const random = Math.floor(Math.random() * morePosts.length);
        randomNums.push(random);
      }
      return morePosts.filter((_, index) => randomNums.includes(index));
    } else {
      return [];
    }
  }, [morePosts]);

  return (
    <div className="flex h-full  flex-col space-y-3">
      {morePosts && (
        <p className="mt-6 font-semibold lg:text-lg">More you might love</p>
      )}
      {randomPosts().map((morePosts) => (
        <ArticleCard
          containerClassName="max-h-[200px] h-screen"
          createdAt={morePosts!.createdAt}
          imgUrl={morePosts!.imageUrl}
          postId={morePosts!.id}
          title={morePosts!.title}
          key={morePosts?.id}
        />
      ))}
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const ssg = generateSSGHelper();

  const { userId } = getAuth(context.req);

  const postId = context.params?.postId;
  if (typeof postId !== "string") throw new Error("no slug");

  const post = await ssg.posts.getById.fetch({ postId: postId });

  if (!post.post.published && userId !== post.post.authorId) {
    return {
      redirect: {
        destination: "/404?post=not-found",
        permanent: false,
      },
    };
  }
  return {
    props: { trpcState: ssg.dehydrate(), postId: postId, fallback: true },
  };
};

export default SelectedPost;
