import { GetServerSideProps, type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";
import { EditorContent, useEditor } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import LayoutWidth from "~/components/ui/LayoutWidth";
import Image from "next/image";
import Header from "~/components/global/Header";
import Button from "~/components/ui/Button";
import Comments from "~/components/comments/Comments";
import { useUser } from "@clerk/nextjs";
import { getAuth } from "@clerk/nextjs/server";
import { useRouter } from "next/router";

const SelectedPost: NextPage<{ postId: string }> = ({ postId }) => {
  const router = useRouter();
  const { data } = api.posts.getById.useQuery({
    postId,
  });

  const editor = useEditor({
    content: JSON.parse(data?.post.content),
    extensions: [StarterKit],
    editable: false,
    editorProps: {
      attributes: {
        class: "prose",
      },
    },
  });

  const { user } = useUser();

  return (
    <>
      <Head>
        <title>Entry - {data?.post.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-full min-h-screen">
        <Header
          postId={postId}
          forPage={router.query.preview ? "post-preview" : "default"}
        />
        <LayoutWidth className="grid gap-4 lg:grid-cols-12 lg:gap-6">
          <div className="h-full pb-24 lg:col-span-8">
            <div className="relative aspect-video rounded-xl bg-neutral-100">
              <Image
                src={data.post.imageUrl}
                alt="Blog image"
                fill
                quality={100}
                priority
                className="pointer-events-none h-full w-full select-none rounded-xl object-cover"
              />
              <div className="absolute -bottom-10 left-0 max-w-md rounded-xl  bg-white p-4 shadow-lg">
                <h1 className="text-4xl font-bold">{data.post.title}</h1>
              </div>
            </div>
            <EditorContent editor={editor} className="mt-16" />
            <Comments postId={postId} />
          </div>
          <aside className="sticky top-0 h-full rounded-xl  bg-neutral-100 p-4 lg:col-span-4">
            <div className="w-full">
              <div className="relative h-24 w-24 rounded-full bg-neutral-400">
                <Image
                  src={data.user.profilePic}
                  alt={`${data.user.username}'s profile picture`}
                  fill
                  className="rounded-full object-cover"
                />
              </div>
              <Button
                href={`/author/${data.user.username}`}
                className="font-medium"
              >
                {data.user.username}
              </Button>
              <p className="mt-2">A short bio of the user.</p>
              <Button
                href={`/author/${data.user.username}`}
                className="mt-4 rounded-full bg-black px-4 py-2 text-center text-white"
              >
                Visit profile
              </Button>
              {user?.id === data.user.id && (
                <Button
                  href={`/journal/create?p=${data?.post.id}`}
                  className="mt-2 rounded-full bg-black px-4 py-2 text-center text-white"
                >
                  Edit Post
                </Button>
              )}
            </div>
            <p className="mb-2 mt-6 font-semibold lg:text-lg">
              More you might love
            </p>
            <div className="space-y-3">
              {[0, 1, 2].map((val) => (
                <div
                  key={val}
                  className="flex items-center justify-between rounded-xl bg-neutral-200 p-4"
                >
                  <p className="max-w-[175px] text-base font-semibold lg:text-lg">
                    A title of the users post.
                  </p>
                  <div className="aspect-video h-full max-h-[115px] max-w-[300px] flex-1 rounded-xl bg-red-500 p-4"></div>
                </div>
              ))}
            </div>
          </aside>
        </LayoutWidth>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const ssg = generateSSGHelper();

  const { userId } = getAuth(context.req);

  const postId = context.params?.postId;
  if (typeof postId !== "string") throw new Error("no slug");

  const post = await ssg.posts.getById.fetch({ postId: postId });

  if (!post.post.published && userId !== post.post.authorId) {
    return {
      redirect: {
        destination: "/404?post=not-found",
        permanent: false,
      },
    };
  }
  return {
    props: { trpcState: ssg.dehydrate(), postId: postId },
  };
};

export default SelectedPost;
